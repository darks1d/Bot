from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler
import random
import logging

logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–∫–∏ –∑–∞–≥–∞–¥–æ–∫ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
riddles_easy = [
    {"question": "–ß—Ç–æ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å —Å –∑–∞–∫—Ä—ã—Ç—ã–º–∏ –≥–ª–∞–∑–∞–º–∏?", "answer": "—Å–æ–Ω"},
    {"question": "–ß—Ç–æ –∏–¥–µ—Ç, –Ω–µ –¥–≤–∏–≥–∞—è—Å—å —Å –º–µ—Å—Ç–∞?", "answer": "—á–∞—Å—ã"},
]

riddles_medium = [
    {"question": "–ß–µ–º –±–æ–ª—å—à–µ –∏–∑ –Ω–µ–µ –±–µ—Ä–µ—à—å, —Ç–µ–º –±–æ–ª—å—à–µ –æ–Ω–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è. –ß—Ç–æ —ç—Ç–æ?", "answer": "—è–º–∞"},
    {"question": "–í–∏—Å–∏—Ç –≥—Ä—É—à–∞ ‚Äî –Ω–µ–ª—å–∑—è —Å–∫—É—à–∞—Ç—å. –ß—Ç–æ —ç—Ç–æ?", "answer": "–ª–∞–º–ø–æ—á–∫–∞"},
]

riddles_hard = [
    {"question": "–ß—Ç–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º, –Ω–æ –¥—Ä—É–≥–∏–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —ç—Ç–æ —á–∞—â–µ, —á–µ–º –≤—ã?", "answer": "–∏–º—è"},
    {"question": "–ß—Ç–æ –º–æ–∂–Ω–æ —Å–ª–æ–º–∞—Ç—å, –¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å?", "answer": "–æ–±–µ—â–∞–Ω–∏–µ"},
]

def start(update: Update, context: CallbackContext):
    
    keyboard = [
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data='start_game')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∑–∞–≥–∞–¥–æ—á–Ω–∏–∫. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=reply_markup)

def start_game(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    keyboard = [
        [InlineKeyboardButton("–õ–µ–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å", callback_data='easy')],
        [InlineKeyboardButton("–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å", callback_data='medium')],
        [InlineKeyboardButton("–°–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", callback_data='hard')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    query.edit_message_text("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=reply_markup)

def choose_level(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    level = query.data
    context.user_data["level"] = level

    send_riddle(update, context)

def send_riddle(update: Update, context: CallbackContext):
    level = context.user_data.get("level")

    if level == "easy":
        riddle_data = random.choice(riddles_easy)
    elif level == "medium":
        riddle_data = random.choice(riddles_medium)
    elif level == "hard":
        riddle_data = random.choice(riddles_hard)
    else:   
        riddle_data = random.choice(riddles_easy)

    question = riddle_data["question"]
    context.user_data["current_answer"] = riddle_data["answer"]  

    if update.callback_query:
        update.callback_query.edit_message_text(f"–ó–∞–≥–∞–¥–∫–∞: {question}")
    else:
        update.message.reply_text(f"–ó–∞–≥–∞–¥–∫–∞: {question}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def handle_message(update: Update, context: CallbackContext):
    user_answer = update.message.text.lower()
    correct_answer = context.user_data.get("current_answer", "")

    if user_answer == correct_answer:
        update.message.reply_text("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü! üéâ –ù–∞–ø–∏—à–∏ /start –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–≥–∞–¥–∫–∏.")
    else:
        update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")

def main():

    TOKEN = "7709523457:AAGdkIBWgJdOzqXI9Q_5qzelVDllElTiE_4"

    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start))

    dispatcher.add_handler(CallbackQueryHandler(start_game, pattern='start_game'))
    dispatcher.add_handler(CallbackQueryHandler(choose_level, pattern='^(easy|medium|hard)$'))

    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
